name: Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:
env:
  PREFIX: "adx"
  ENV: "dev"
  TF_DIRECTORY: "infra/adx"
  TF_STATE_PREFIX: "adx"

permissions:
  id-token: write
  contents: read
jobs:
  build-and-deploy:
    ##environment: dev
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Run az commands'
        run: |
          az account show
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          az group list

      - name: 'init terraform'
        working-directory: ${{ env.TF_DIRECTORY }}
        env:
          ## this replaces -backend-config setup for OIDC 
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}    
          ARM_USE_AZUREAD: true ## to acces TF storage account
        run: |
          echo ${PWD}
          
          ## az storage container show --account-name ${PREFIX}${ENV}tfsa --auth-mode login --name "terraform-state"
          ## az storage blob list --account-name ${PREFIX}${ENV}tfsa --container-name "${TF_STATE_PREFIX}-terraform-state" --auth-mode login 
          
          ## sudo snap install terraform --classic
          ## terraform -v
          terraform init -backend-config="use_azuread_auth=true" \
            -backend-config="storage_account_name=${PREFIX}${ENV}tfsa" \
            -backend-config="container_name=${TF_STATE_PREFIX}-terraform-state" \
            -backend-config="key=terraform.tfstate"

      - name : import
        working-directory: ${{ env.TF_DIRECTORY }}
        run: |
        
          file=../../conf/${ENV}.json

          if [[ -f $file ]]; then 

            mainrg=$( az group list --query "[?name=='${PREFIX}-${ENV}-main-rg']" -o tsv)
            spokerg=$( az group list --query "[?name=='${PREFIX}-${ENV}-spoke-rg']" -o tsv)

            [[ -f "./import.tf" ]] && rm ./import.tf

            if [[ ! -z $mainrg ]]; then 
              cat >> ./import.tf << EOF
              import {
                  to = azurerm_resource_group.main
                  id = "$mainrg"
              }
              EOF

            fi

            if [[ ! -z $spokerg ]]; then 
              cat >> ./import.tf << EOF
              import {
                  to = azurerm_resource_group.spoke
                  id = "$spokerg"
              }
              EOF

            fi
          fi

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIRECTORY }}
        env:
          ## this replaces -backend-config setup for OIDC 
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}    
          ARM_USE_AZUREAD: true ## to acces TF storage account
        run: |

          echo "tenant id : ${{ secrets.AZURE_TENANT_ID }}"
          
          terraform plan -var-file=./environments/${ENV}.tfvars \
            -var="tenant_id=${{ secrets.AZURE_TENANT_ID }}"\
            -out="out.plan"
      
      - name: Terraform Validate
        shell: bash
        run: |
          terraform validate
        working-directory: ${{ env.TF_DIRECTORY }}
        

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIRECTORY }}
        env:
          ## this replaces -backend-config setup for OIDC 
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}    
          ARM_USE_AZUREAD: true ## to acces TF storage account
        run: |
          terraform apply ./out.plan
